schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  autos(modell: String): [Auto!]

  auto(id: ID!): Auto
}

"Funktionen, um Bücher neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: AutoInput!): String

  update(input: AutoUpdateInput!): Int

  delete(id: ID!): Boolean
}

"Datenschema zu einem Auto, das gelesen wird"
type Auto {
  id: ID
  version: Int
  modell: String
  ps: Int
  art: Art
  hersteller: Hersteller
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  modellnummer: String
  homepage: String
  kategorien: [String]
}

"Enum-Typ für die Art eines Autos"
enum Art {
  VERBRENNER
  ELEKTRO
}

"Enum-Typ für den Hersteller eines Autos"
enum Hersteller {
  AUDI
  BMW
}

"Daten für ein neues Auto"
input AutoInput {
  modell: String!
  ps: Int
  art: Art
  hersteller: Hersteller!
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  modellnummer: String
  homepage: String
  kategorien: [String]
}

"Daten für ein zu änderndes Auto"
input AutoUpdateInput {
  id: ID
  version: Int
  modell: String!
  ps: Int
  art: Art
  hersteller: Hersteller!
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  modellnummer: String
  homepage: String
  kategorien: [String]
}
